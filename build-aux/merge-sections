#!/bin/sh
SH=--[[                                             # -*- mode: lua; -*-
## Slingshot bootstrap section merge script.
##
## This file is distributed with Slingshot, and licensed under the
## terms of the MIT license reproduced below.

## ====================================================================
## Copyright (C) 2014 Gary V. Vaughan
##
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation
## files (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
##
## The above copyright notice and this permission notice shall be
## included in  all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGE-
## MENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
## FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
## CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
## WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## ====================================================================


_lua_version_re='"Lua 5."[123]*'
_lua_binaries='lua lua5.3 lua53 lua5.2 lua52 lua5.1 lua51'

export LUA_INIT
export LUA_INIT_5_2
export LUA_INIT_5_3
export LUA_PATH
export LUA_CPATH

# Be Bourne compatible
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
fi

# If LUA is not set, search PATH for something suitable.
test -n "$LUA" || {
  # Check that the supplied binary is executable and returns a compatible
  # Lua version number.
  func_vercheck ()
  {
    test -x "$1" && {
      eval 'case `'$1' -e "print (_VERSION)" 2>/dev/null` in
        '"$_lua_version_re"') LUA='$1' ;;
      esac'
    }
  }

  progname=`echo "$0" |${SED-sed} 's|.*/||'`

  save_IFS="$IFS"
  LUA=
  for x in $_lua_binaries; do
    IFS=:
    for dir in $PATH; do
      IFS="$save_IFS"
      func_vercheck "$dir/$x"
      test -n "$LUA" && break
    done
    IFS="$save_IFS"
    test -n "$LUA" && break
    e="${e+$e\n}$progname: command not found on PATH: $x"
  done
}

test -n "$LUA" || {
  printf "${e+$e\n}$progname: retry after 'export LUA=/path/to/lua'\n" >&2
  exit 1
}

LUA_INIT=
LUA_INIT_5_2=
LUA_INIT_5_3=

# Reexecute using the interpreter suppiled in LUA, or found above.
exec "$LUA" "$0" "$@"
]]SH


--[[ ============== ]]--
--[[ Parse options. ]]--
--[[ ============== ]]--

prog = {
  name = arg[0] and arg[0]:gsub (".*/", "") or "merge-sections",

  opts = { exprs={} },
}

local usage = "Usage: " .. prog.name .. " [OPTIONS] FILE...\n"

-- Print an argument processing error message, and return non-zero exit
-- status.
local function opterr (msg)
  io.stderr:write (usage)
  io.stderr:write (prog.name .. ": error: " .. msg .. ".\n")
  io.stderr:write (prog.name .. ": Try '" .. prog.name .. " --help' for help,\n")
  os.exit (2)
end

local function die (msg)
  msg:gsub ("([^\n]+)\n?",
            function ()
              io.stderr:write (prog.name .. ": error: " .. msg.. "\n")
	    end)
  os.exit (1)
end

prog["--help"] = function ()
  print (usage .. [[

Merge sections of script fragments into standard input.

Files listed on the command line are separated into sections delimited by
'-- ##\n## Section name. ##\n## --', and then standard input is read,
and copied to standard output with the sections from read files merged in
at the end of identically named sections from standard input.

  -e PATT REPLACE        replace Lua pattern PATT with REPLACE
  -v, --verbose          verbosely report processing
      --help             print this help, then exit
      --version          print version number, then exit

PATT/REPLACE substitutions are performed on each line of standard input
(not the listed merge files) before copying to standard output. The '-e'
option can be passed multiple times.

Report bugs to http://github.com/gvvaughan/slingshot/issues.]])
    os.exit (0)
end

prog["--version"] = function ()
  print [[merge-sections (slingshot) 8.0.0
Written by Gary V. Vaughan <gary@gnu.org>, 2014

Copyright (C) 2014, Gary V. Vaughan
Slingshot comes with ABSOLUTELY NO WARRANTY.
See source files for individual license conditions.]]
  os.exit (0)
end

prog["--verbose"] = function (arglist, i)
  prog.opts.verbose = true
  return i
end
prog["-v"] = prog["--verbose"]

prog["-e"] = function (arglist, i)
  local opt = arglist[i]
  if i + 2 > #arglist then
    opterr ("option '" .. opt .."' requires two arguments")
  end

  table.insert (prog.opts.exprs, {arglist[i + 1], arglist[i + 2]})
  return i + 2
end

local nonopts
local i = 0
while i < #arg do
  i = i + 1
  local opt = arg[i]

  -- Collect remaining arguments not nonopts to save back into _G.arg later.
  if type (nonopts) == "table" then
    table.insert (nonopts, opt)

  -- Run prog.option handler.
  elseif opt:sub (1,1) == "-" and type (prog[opt]) == "function" then
    i = prog[opt] (arg, i)

  -- End of option arguments.
  elseif opt == "--" then
    nonopts = {}

  -- Diagnose unknown command line options.
  elseif opt:sub (1, 1) == "-" then
    opterr ("unrecognized option '" .. opt .. "'")

  -- First non-option argument marks the end of options.
  else
    nonopts = { opt }
  end
end

-- Put non-option args back into global arg table.
nonopts = nonopts or {}
nonopts[0] = arg[0]
_G.arg = nonopts

if select ("#", ...) < 1 then
  opterr "no file arguments provided"
end


--[[ ================= ]]--
--[[ Helper functions. ]]--
--[[ ================= ]]--

-- Print a warning message to standard error.
local function warn (msg)
  io.stderr:write (prog.name .. ": warning: " .. msg .. ".\n")
end


-- Print a progress message, only if --verbose was given.
local function verbose (msg)
  if prog.opts.verbose then
    io.stderr:write (prog.name .. ": " .. msg .. "\n")
  end
end


--[[ ===== ]]--
--[[ Main. ]]--
--[[ ===== ]]--

local header_pattern  = "## ([%w%s.]+%.) ##"
local section_pattern = "%-%- ##\n" .. header_pattern .. "\n## %-+ ##\n\n(.-)\n## %-%-"
local sections = {}

-- Read sections to merge, from listed filenames.
for _, filename in ipairs (arg) do
  local h, errmsg = io.open (filename)
  if not h then die (filename .. ": " .. errmsg) end

  local s = h:read "*a"
  h:close ()

  s:gsub (section_pattern, function (title, code)
    verbose (filename .. ": found " .. (sections[title] and "" or "initial ") .. title)
    sections[title] = sections[title] or ""
    sections[title] = sections[title] .. code
  end)
end

-- Copy stdin to stdout, injecting merge sections as we go.
local in_section, next_section
for line in io.stdin:lines () do
  if line:match ("^## %-+ ##$") then
    next_section = not next_section
    if next_section and in_section and sections[in_section] then
      verbose ("stdout: emitting additional code from " .. in_section)
      print (sections[in_section])
      sections[in_section] = nil
    end
  end

  if next_section and line:match ("^" .. header_pattern .. "$") then
    in_section = line:gsub (header_pattern, "%1")
    verbose ("stdin: changing into section " .. in_section)
  end

  for _, e in ipairs (prog.opts.exprs) do
    line = line:gsub (e[1], e[2])
  end
  print (line)
end

for name in pairs (sections) do
  warn ("section '" .. name .. "' was not merged")
end
