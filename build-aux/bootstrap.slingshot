# bootstrap.slingshot (Slingshot) version 2013-05-06
#
# Copyright (C) 2013-2014 Gary V. Vaughan
# Written by Gary V. Vaughan, 2013

# This is free software; see the source for copying conditions.  There is NO
# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Libtool; see the file COPYING.  If not, a copy
# can be downloaded from  http://www.gnu.org/licenses/gpl.html,
# or obtained by writing to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.


## -------------- ##
## Configuration. ##
## -------------- ##

# List of slingshot files to link into stdlib tree before autotooling.
slingshot_files=$slingshot_files

# Relative path to the local slingshot submodule, and url to the upsream
# git repository.  If you have a slingshot entry in your .gitmodules file,
# these values are ignored.
slingshot_path=$slingshot_path
slingshot_url=$slingshot_url

# NOTE: slingshot bootstrap will check rockspecs listed in $buildreq,
#       according to the URL part of a specification triple ending in
#       `.rockspec`.


## ------------------------------- ##
## User overridable command paths. ##
## ------------------------------- ##

: ${LUAROCKS="luarocks"}

export LUAROCKS


## ----------------- ##
## Helper functions. ##
## ----------------- ##

# slingshot_copy FILENAME SRCDIR DESTDIR
# --------------------------------------
# If option '--copy' was specified, or soft-linking SRCFILE to DESTFILE
# fails, then try to copy SRCFILE to DESTFILE (making sure to update the
# timestamp so that a series of files with dependencies can be copied
# in the right order that their timestamps won't trigger rebuilds).
slingshot_copy ()
{
    $debug_cmd

    slingshot_srcfile=`echo "$2/$1" |sed -e 's|/\./|/|g'`
    slingshot_destfile=`echo "$3/$1" |sed -e 's|/\./|/|g'`

    $opt_force || {
      # Nothing to do if the files are already identical.
      if func_cmp_s "$slingshot_srcfile" "$slingshot_destfile"; then
        func_verbose "'$slingshot_destfile' is up to date."
        return 0
      fi
    }

    # Require --force to remove existing $slingshot_destfile.
    $opt_force && $RM "$slingshot_destfile"
    test -f "$slingshot_destfile" && {
      func_warn_and_continue "'$slingshot_destfile' exists: use '--force' to overwrite"
      return 0
    }

    # Be careful to support 'func_copy dir/target srcbase destbase'.
    func_dirname "$slingshot_destfile"
    func_mkdir_p "$func_dirname_result"

    # Copy or link according to '--copy' option.
    if $opt_copy; then
      slingshot_copycmd=$CP
      slingshot_copy_type=copying
    else
      slingshot_copycmd=$LN_S
      slingshot_copy_type=linking

      func_relative_path "$3" "$2"
      slingshot_srcfile=$func_relative_path_result/$1
    fi
    slingshot_copy_msg="$slingshot_copy_type file '$slingshot_destfile'"
    $opt_verbose && \
      slingshot_copy_msg="$slingshot_copy_type $slingshot_srcfile $3"

    if $opt_dry_run || {
        ( umask 0
          $slingshot_copycmd "$slingshot_srcfile" "$slingshot_destfile"
        ) >/dev/null 2>&1
      }
    then
      echo "$slingshot_copy_msg"
    else
      func_error "$slingshot_copy_type '$2/$1' to '$3/' failed"
      return 1
    fi
}


# slingshot_rockspec_error
# ------------------------
# Called by zile_check_rockspecs for missing rocks.
slingshot_rockspec_error ()
{
    $debug_cmd

    _G_strippedver=`expr "$_G_reqver" : '=*\(.*\)'`
    func_error "\
Prerequisite LuaRock '$_G_rock $_G_strippedver' not found. Please install it."

    rockspecs_uptodate_result=false
}


## --------------- ##
## Option parsing. ##
## --------------- ##


# slingshot_options_prep
# ----------------------
# Preparation for additional slingshot option parsing.
slingshot_options_prep ()
{
    $debug_cmd

    # Option defaults:
    opt_skip_rock_checks=false
    # opt_luarocks_tree default in *unset*!

    # Extend the existing usage message.
    usage_message=$usage_message'
Slingshot Options:

        --luarocks-tree=DIR
                      check a non-default tree for prerequisite rocks
        --skip-rock-checks
                      ignore Lua rocks in bootstrap.conf:buildreq'

    func_quote_for_eval ${1+"$@"}
    slingshot_options_prep_result=$func_quote_for_eval_result
}
func_add_hook func_options_prep slingshot_options_prep


# slingshot_parse_options OPT...
# ------------------------------
# Called at the end of each main option parse loop to process any
# additional slingshot options.
slingshot_parse_options ()
{
    $debug_cmd

    # Perform our own loop to consume as many options as possible in
    # each iteration.
    while test $# -gt 0; do
      _G_opt=$1
      shift
      case $_G_opt in
        --luarocks-tree)
                      test $# = 0 && func_missing_arg $_G_opt && break
                      opt_luarocks_tree=$1
                      shift
                      ;;

        --skip-rock-checks)
                      opt_skip_rock_checks=:
                      ;;

	# Separate optargs to long options (plugins may need this):
	--*=*)        func_split_equals "$_G_opt"
	              set dummy "$func_split_equals_lhs" \
                          "$func_split_equals_rhs" ${1+"$@"}
                      shift
                      ;;

        *)            set dummy "$_G_opt" ${1+"$@"}; shift; break ;;
      esac
    done

    # save modified positional parameters for caller
    func_quote_for_eval ${1+"$@"}
    slingshot_parse_options_result=$func_quote_for_eval_result
}
func_add_hook func_parse_options slingshot_parse_options


# slingshot_option_validation
# ---------------------------
# Flag any inconsistencies in users' selection of slingshot options.
slingshot_option_validation ()
{
    $debug_cmd

    test -z "$opt_luarocks_tree" \
      || test -d "$opt_luarocks_tree" \
      || func_fatal_help "$opt_luarocks_tree: not a directory"
}
func_add_hook func_validate_options slingshot_option_validation


## ------------------- ##
## Hookable functions. ##
## ------------------- ##

## The section title above is chosen for what section of bootstrap
## these functions will be merged to, so that the invocations of
## `func_add_hook` are guaranteed not to be executed until after
## the hook management functions are defined.


# slingshot_split_buildreq
# ------------------------
# For convenience, let the user add rockspec requirements to $buildreq.
# Note that this is for *build-time* requirements (e.g. ldoc), so that
# make can complete without error. You should add *run-time* rockspec
# requirements (e.g. stdlib) to rockspec.conf.
slingshot_split_buildreq ()
{
    $debug_cmd

    $require_rockspecs_req
}
func_add_hook func_init slingshot_split_buildreq


# slingshot_check_rockspecs
# -------------------------
# Check build-time rockspecs from $buildreq are uptodate.
# It would be nice if we could rely on luarock binaries to respond to
# `--version` like GNU apps, but there is no reliable consensus, so we
# have to check installed luarock versions directly, and warn the user
# if the apps we're checking for are not somewhere along PATH.
slingshot_check_rockspecs ()
{
    $debug_cmd

    $opt_skip_rock_checks && return

    $require_rockspecs_req

    _G_req=
    rockspecs_uptodate_result=:

    set dummy $rockspecs_req; shift
    while test $# -gt 0; do
      _G_rock=$1; shift
      _G_reqver=$1; shift
      _G_url=$1; shift

      func_append _G_req " $_G_rock $_G_url"

      # Honor $APP variables ($LDOC, $SPECL, etc.)
      _G_appvar=`echo $_G_rock |tr '[a-z]' '[A-Z]'`
      eval "_G_rock=\${$_G_appvar-$_G_rock}"

      # Trust the user will ensure the binaries will arive at the
      # specified location before they are needed if they set these.
      if eval 'test -n "${'$_G_appvar'+set}"'; then
	eval test -f '"${'$_G_appvar'}"' \
          || eval 'func_warning settings "\
not checking whether $'$_G_appvar' has version $_G_reqver;
configure or make may fail because you set $_G_appvar, but
$'$_G_appvar' does not yet exist!"'
      else
        _G_instver=`$LUAROCKS ${opt_luarocks_tree+--tree=$opt_luarocks_tree} \
                    show $_G_rock 2>/dev/null \
          |sed -n '/^'"$_G_rock"' .* - /{s/^'"$_G_rock"' \(.*\) - .*$/\1/p;}'`

        if test -z "$_G_instver"; then
          slingshot_rockspec_error
        else
          func_verbose "found '$_G_rock' version $_G_instver."

          case $_G_reqver in
            =*)
              test "x$_G_reqver" = "x=$_G_instver" || slingshot_rockspec_error
              ;;
            *)
              func_lt_ver "$_G_reqver" "$_G_instver" || slingshot_rockspec_error
              ;;
          esac
        fi
      fi
    done

    $rockspecs_uptodate_result || {
      func_strtable 0 10 48 \
        "Program" "Rockspec_URL" $_G_req
      func_fatal_error "Missing rocks:
$func_strtable_result
Install missing rockspecs with:
    $LUAROCKS ${opt_luarocks_tree+--tree=$opt_luarocks_tree }install \$Rockspec_URL
and then rerun bootstrap with the --luarocks-tree option set
appropriately, or if you're sure that the missing rocks will
be installed before running make by exporting:
     APPNAME=/path/to/app.
"
    }
}
func_add_hook func_prep slingshot_check_rockspecs


# slingshot_copy_files
# --------------------
# Update files from slingshot subproject.
slingshot_copy_files ()
{
    $debug_cmd

    $require_package

    test slingshot = "$package" || {
      func_check_configuration slingshot_files

      $require_slingshot_submodule

      # Make sure we have the latest mkrockspecs
      # (the rebootstrap rule in slingshot/GNUmakefile autoruns).
      make -C slingshot build-aux/mkrockspecs

      # Update in-tree links.
      for file in $slingshot_files; do
        func_dirname_and_basename "./$file"
        slingshot_copy "$func_basename_result" \
          "slingshot/$func_dirname_result" "$func_dirname_result"
      done
    }
}
func_add_hook func_prep slingshot_copy_files


# slingshot_ensure_changelog
# --------------------------
# Slingshot project probably won't have a gnulib_modules list.
# So we redo the ChangeLog check against slingshot_files.
slingshot_ensure_changelog ()
{
    $debug_cmd

    if test -n "$slingshot_files"; then
      func_ifcontains "$slingshot_files" build-aux/gitlog-to-changelog \
        func_ensure_changelog
    fi

    return 0
}
func_add_hook func_prep slingshot_ensure_changelog


# slingshot_update_travis_yml
# ---------------------------
# When 'travis.yml.in' is listed in $slingshot_files, complain if
# regenerating '.travis.yml' would change it.
slingshot_update_travis_yml ()
{
    $debug_cmd

    case " "`echo $slingshot_files`" " in
    *" travis.yml.in "*)
      _G_travis_yml_in=travis.yml.in
      _G_travis_yml_out=.travis.yml

      # Remove trailing blanks so as not to trip sc_trailing_blank in syntax check
      test -f "$_G_travis_yml_in" && {
        $slingshot_require_travis_extra_rocks

        eval `grep '^ *PACKAGE=' configure | sed 1q`

        cat "$_G_travis_yml_in" |
        sed 's|  *$||' |
        sed "s|@EXTRA_ROCKS@|`echo $travis_extra_rocks`|g" |
        sed "s|@PACKAGE@|$PACKAGE|g"

        if test -f .slackid; then
          read slackid < .slackid
          printf '%s\n' '' 'notifications:' "  slack: $slackid"
        fi
      } > "$_G_travis_yml_out.new"

      if test -f "$_G_travis_yml_out"; then
        if func_cmp_s "$_G_travis_yml_out" "$_G_travis_yml_out.new"; then
	  func_verbose "$_travis_yml_out is up to date"
          rm -f "$_travis_yml_out.new"
        else
          func_warning upgrade "\
An updated $_G_travis_yml_out script is ready for you in
'$_G_travis_yml_out.new'.  After you've verified that you want
the changes, you can update with:
    mv -f $_G_travis_yml_out.new $_G_travis_yml_out"
        fi
      else
	func_verbose "creating '$_travis_yml_out'"
        mv -f "$_G_travis_yml_out.new" "$_G_travis_yml_out"
      fi
      ;;
    esac
}
func_add_hook func_fini slingshot_update_travis_yml


# slingshot_check_rockstree_path
# ------------------------------
# Show a warning at the end of bootstrap if --luarocks-tree was passed
# set, but $opt_luarocks_tree/bin is not in the command PATH.
slingshot_check_rockstree_path ()
{
    $debug_cmd

    test -z "$rockspecs_req" || {
      case :$PATH: in
        *:$opt_luarocks_tree/bin:*) ;;
	*) func_warning recommend \
             "If configure or make fail, try adding $opt_luarocks_tree/bin to PATH" ;;
      esac
    }
}
func_add_hook func_fini slingshot_check_rockstree_path


## -------------------- ##
## Resource management. ##
## -------------------- ##

# require_rockspecs_req
# ---------------------
# Remove rockspecs from $buildreq, and add them to $rockspecs_req.
require_rockspecs_req=slingshot_require_rockspecs_req
slingshot_require_rockspecs_req ()
{
    $debug_cmd

    test -n "$rockspecs_req" || {
      _G_non_rockspecs=

      set dummy $buildreq; shift

      while test $# -gt 2; do
        case $3 in
          *.rockspec)
            func_append rockspecs_req " $1 $2 $3"
            ;;
          [a-z]*://*)
            func_append _G_non_rockspecs " $1 $2 $3"
            ;;
	  *) func_fatal_error "\
'$3' from the buildreq table in
'bootstrap.conf' does not look like the URL for downloading
$1. Please ensure that buildreq is a strict newline
delimited list of triples; 'program min-version url'."
            ;;
        esac
	shift; shift; shift
      done

      buildreq=$_G_non_rockspecs
    }

    require_rockspecs_req=:
}


# require_slingshot_dotgitmodules
# -------------------------------
# Ensure we have a '.gitmodules' file, with appropriate 'slingshot' settings.
require_slingshot_dotgitmodules=slingshot_require_slingshot_dotgitmodules
slingshot_require_slingshot_dotgitmodules ()
{
    $debug_cmd

    $require_git

    test true = "$GIT" || {
      # A slingshot entry in .gitmodules always takes precedence.
      _G_path=`$GIT config --file .gitmodules submodule.slingshot.path 2>/dev/null`

      test -n "$_G_path" || {
        $require_vc_ignore_files

        func_verbose "adding slingshot entries to '.gitmodules'"

        test -n "$slingshot_path" || slingshot_path=slingshot
        test -n "$slingshot_url"  || slingshot_url=git://github.com/gvvaughan/slingshot.git

        {
          echo '[submodule "slingshot"]'
          echo "	path=$slingshot_path"
          echo "	url=$slingshot_url"
        } >> .gitmodules

        test -n "$vc_ignore_files" \
          || func_insert_if_absent ".gitmodules" $vc_ignore_files
      }
    }

    require_slingshot_dotgitmodules=:
}


# require_slingshot_path
# require_slingshot_url
# ----------------------
# Ensure 'slingshot_path' and 'slingshot_url' are set.
require_slingshot_path=slingshot_require_slingshot_dotgitmodules_parameters
require_slingshot_url=slingshot_require_slingshot_dotgitmodules_parameters
slingshot_require_slingshot_dotgitmodules_parameters ()
{
    $debug_cmd

    $require_git
    $require_slingshot_dotgitmodules

    test -f .gitmodules \
      || func_fatal_error "Unable to update '.gitmodules' with slingshot submodule"

    test true = "$GIT" || {
      slingshot_path=`$GIT config --file=.gitmodules --get submodule.slingshot.path`
      slingshot_url=`$GIT config --file=.gitmodules --get submodule.slingshot.url`

      func_verbose "slingshot_path='$slingshot_path'"
      func_verbose "slingshot_url='$slingshot_url'"
    }

    require_slingshot_path=:
    require_slingshot_url=:
}


# require_slingshot_submodule
# ---------------------------
# Ensure that there is a current slingshot submodule.
require_slingshot_submodule=slingshot_require_slingshot_submodule
slingshot_require_slingshot_submodule ()
{
    $debug_cmd

    $require_git

    if test true = "$GIT"; then
      func_warning recommend \
          "No 'git' found; imported slingshot modules may be missing."
    else
      $require_slingshot_dotgitmodules

      if test -f .gitmodules; then
        $require_slingshot_path
        $require_slingshot_url

        if test -f "slingshot/src/mkrockspecs.in"; then
          : All present and correct.

        else
          trap slingshot_cleanup 1 2 13 15

          shallow=
          $GIT clone -h 2>&1 |func_grep_q -- --depth \
              && shallow='--depth 365'

          func_show_eval "$GIT clone $shallow '$slingshot_url' '$slingshot_path'" \
            slingshot_cleanup

          # FIXME: Solaris /bin/sh will try to execute '-' if any of
          #        these signals are caught after this.
          trap - 1 2 13 15
        fi

        # Make sure we've checked out the correct revision of slingshot.
        func_show_eval "$GIT submodule init -- $slingshot_path" \
          && func_show_eval "$GIT submodule update -- $slingshot_path" \
          || func_fatal_error "Unable to update slingshot submodule."
      fi
    fi

    require_slingshot_submodule=:
}


# require_bootstrap_uptodate
# --------------------------
# Complain if the version of bootstrap in the build-aux directory differs
# from the one we are running.
require_bootstrap_uptodate=slingshot_require_bootstrap_uptodate
slingshot_require_bootstrap_uptodate ()
{
    $debug_cmd

    $require_slingshot_submodule

    _G_slingshot_bootstrap=slingshot/bootstrap

    if test -f "$_G_slingshot_bootstrap"; then
      if func_cmp_s "$progpath" "$_G_slingshot_bootstrap"; then
	func_verbose "bootstrap script up to date"
      else
        func_warning upgrade "\
An updated slingshot bootstrap script is ready for you in
'$_G_slingshot_bootstrap'.  After you've verified that you want
the changes, you can update with:
    cp -f $_G_slingshot_bootstrap $progname
    ./$progname

Or you can disable this check permanently by adding the
following to 'bootstrap.conf':
    require_bootstrap_uptodate=:"
      fi
    else
      func_warning upgrade "\
Your slingshot submodule appears to be damagedi, so I can't tell
whether your bootstrap has gone out of sync.  Please check for
and undo any local changes, or revert to the slingshot revision
you were using previously, and rerun this script."
    fi

    require_bootstrap_uptodate=:
}


# slingshot_cleanup
# -----------------
# Recursively delete everything at $slingshot_path.
slingshot_cleanup ()
{
    $debug_cmd

    $require_slingshot_path

    _G_status=$?
    $RM -fr $slingshot_path
    exit $_G_status
}


## --------------------------- ##
## Emacs timestamp management. ##
## --------------------------- ##

# Local variables:
# mode: shell-script
# sh-indentation: 2
# eval: (add-hook 'write-file-hooks 'time-stamp)
# time-stamp-start: "# bootstrap.slingshot (Slingshot) version "
# time-stamp-format: "%:y-%02m-%02d"
# time-stamp-end: "$"
# End:
